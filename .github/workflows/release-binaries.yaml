name: Compile into binaries

on:
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      release:
        description: "Release tag where to create the binaries (as SemVer vX.X.X)"
        required: true
        default: v0.1.0

permissions:
  contents: write
  packages: write

jobs:
  releases-matrix:
    name: Release Python Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel:
        # linux/amd64, linux/arm64, darwin/amd64, darwin/arm64
        os: [ubuntu-latest, macos-latest]
        arch: [x64, arm64]
        exclude:
          - os: macos-latest
            arch: arm64 # Assuming no arm64 macos runners, adjust as needed

    steps:
      - id: read_tag
        name: "Read release tag name (mostly vx.x.x)"
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            export TAG="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export TAG="${{ inputs.release }}"
          fi

          echo "release_tag=${TAG}" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v5
        with:
          ref: ${{ steps.read_tag.outputs.release_tag }}

      - name: "Read Python version from pyproject.toml"
        id: read_python_version
        run: |
          python_version=$(grep "^requires-python" pyproject.toml | sed 's/requires-python = "\(.*\)"/\1/' | sed 's/>=//')
          echo "python_version=${python_version:-3.11}" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v5
        with:
          python-version: "${{ steps.read_python_version.outputs.python_version }}"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Install PyInstaller
        run: uv add --dev pyinstaller

      - name: "Build binary"
        id: build_binary
        run: |
          printf "OS: %s, ARCH: %s\n" "${{ matrix.os }}" "${{ matrix.arch }}"

          export VERSION=${{ steps.read_tag.outputs.release_tag }}

          # Assuming main entry point is mcp_app.main:main or similar
          # Adjust the script path as needed
          uv run pyinstaller --onefile --name mcp-forge-python-${VERSION}-${{ matrix.os }}-${{ matrix.arch }} mcp_app/main.py
      - name: "Craft package and its signature"
        id: build_package
        run: |
          export PACKAGE_NAME=mcp-forge-python-${{ steps.read_tag.outputs.release_tag }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

          tar -czf dist/${PACKAGE_NAME} dist/mcp-forge-python-${{ steps.read_tag.outputs.release_tag }}-${{ matrix.os }}-${{ matrix.arch }}

          md5sum dist/${PACKAGE_NAME} > dist/${PACKAGE_NAME}.md5

          echo "package_name=${PACKAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: "Upload package to release"
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/${{ steps.build_package.outputs.package_name }}
          asset_name: ${{ steps.build_package.outputs.package_name }}
          tag: ${{ steps.read_tag.outputs.release_tag }}
          overwrite: true

      - name: "Upload package signature to release"
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/${{ steps.build_package.outputs.package_name }}.md5
          asset_name: ${{ steps.build_package.outputs.package_name }}.md5
          tag: ${{ steps.read_tag.outputs.release_tag }}
          overwrite: true
